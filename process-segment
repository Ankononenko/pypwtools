#!/usr/bin/env python3

import argparse
import csv
import threading
import time

import requests
from dotenv import load_dotenv
from concurrent.futures import ThreadPoolExecutor

import const
import helpers.utils
from helpers import auth, device
from helpers import csv as hcsv

# uncomment to show verbose logs from requests lib
# import logging, requests, timeit
# logging.basicConfig(level=logging.DEBUG, format="%(message)s")

# load environment file
load_dotenv()

# configure argparse
parser = argparse.ArgumentParser(description='Iterate export file and process devices')
auth.cmdline_setup(parser)
parser.add_argument('-a', '--action',
                    required=True,
                    help='acton to execute. possible values: registerDevice, setTags, unregisterDevice, deleteDevice')
parser.add_argument('-c', '--concurrency',
                    default=20,
                    type=int,
                    help="amount of concurrent threads. default: 1, max: 100")
parser.add_argument('--app', required=True,
                    help='application code')
parser.add_argument('segment', help='segment file to process')
args = parser.parse_args()

auth.cmdline_validate(parser, args)

# create single requests session to allow the library to reuse tcp connections
session = requests.session()


class State:
    concurrency = 0
    total_lines = 0
    processed_lines = 0
    currently_processing_lines = 0
    done = False


state = State()
state.concurrency = args.concurrency


def iterate_csv(filename: str, cb):
    # calculate amount of lines in a file
    state.total_lines = sum(1 for _ in open(filename))

    # do not count csv header as a device
    if state.total_lines > 1:
        state.total_lines = state.total_lines - 1

    print("processing %d lines in %s using %d threads" % (state.total_lines, filename, state.concurrency))

    # progress drawing thread
    def progress():
        while not state.done:
            helpers.utils.draw_progress(state.total_lines, state.processed_lines)
            time.sleep(1)
    progress_thread = threading.Thread(target=progress)
    progress_thread.start()

    # start executor threads
    executor = ThreadPoolExecutor(max_workers=state.concurrency)

    # put job into the thread pool for each device
    with open(filename, newline="") as csvin:
        reader = csv.reader(csvin)
        struct = hcsv.parse_struct(reader.__next__())
        for _row in reader:
            row = hcsv.Row(struct, _row)
            dev = device.from_row(row)
            executor.submit(cb, dev)

    executor.shutdown(True)  # terminate executors threads
    state.done = True  # set done flag to true to let progress thread know that it can exit
    progress_thread.join()  # cleanup progress thread
    # most likely the progress will never reach 100% because it refreshes once in a second.
    # this final draw call guarantees that we will see 100%
    helpers.utils.draw_progress(state.total_lines, state.processed_lines)


def register_device():
    def call(dev: device.Device):
        request = {
            "application": args.app,
            "hwid": dev.hwid,
            "device_type": dev.platform,
            "push_token": dev.push_token,
        }

        resp = session.post(const.URL_REGISTER_DEVICE, json={"request": request})
        if resp.status_code != 200:
            print(dev.hwid + ":" + resp.text)

        state.processed_lines = state.processed_lines + 1

    iterate_csv(args.segment, call)


def set_tags():
    def call(dev: device.Device):
        request = {
            "application": args.app,
            "device_type": dev.platform,
            "hwid": dev.hwid,
            "tags": dev.tags,
        }

        resp = session.post(const.URL_SET_TAGS, json={"request": request})
        if resp.status_code != 200:
            print(dev.hwid + ":" + resp.text)

        state.processed_lines = state.processed_lines + 1

    iterate_csv(args.segment, call)


def unregister_device():
    def call(dev: device.Device):
        request = {
            "application": args.app,
            "hwid": dev.hwid,
        }

        resp = session.post(const.URL_UNREGISTER_DEVICE, json={"request": request})
        if resp.status_code != 200:
            print(dev.hwid + ":" + resp.text)

        state.processed_lines = state.processed_lines + 1

    iterate_csv(args.segment, call)


def delete_device():
    def call(dev: device.Device):
        request = {
            "application": args.app,
            "hwid": dev.hwid,
        }

        resp = session.post(const.URL_DELETE_DEVICE, json={"request": request})
        if resp.status_code != 200:
            print(dev.hwid + ":" + resp.text)

        state.processed_lines = state.processed_lines + 1

    iterate_csv(args.segment, call)


if args.action == "registerDevice":
    register_device()
elif args.action == 'setTags':
    set_tags()
elif args.action == 'unregisterDevice':
    unregister_device()
elif args.action == 'deleteDevice':
    delete_device()
else:
    parser.error("unknown action: " + args.action)
